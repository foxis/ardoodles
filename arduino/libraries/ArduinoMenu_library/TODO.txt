Arduino Menu Library

+ color enumeration at base level
+ add list of output devices
+ add macros to build navRoot
+ suspension in only one function with suspension events
+ implement other fields
+ use menu acceletators + auto numbering
+ output numbering + acceletation should be optional for any menu class and not just specialized
- split options into:
  * config (static MEMMODE)
  * options (dynamic => RAM)
+ use/draw title option for any menu, and ignore it on single line devices!
+ wrap menuField's https://github.com/neu-rah/ArduinoMenu/issues/58
+ BUG: alert is only showing on the first device
- use array of tops with path depth on each output device
  => do not use lastTop!
- implement scroll commands on output devices
  => panels.nodes must use navNode* instead of menuNode*
  => however previews have no assigned navNode!
    1. just dont pint previews => do we need them?
    2. use union
- dialogs and modal dialogs (static alloc)
- alerts (dynamic)
- errors (dynamic modal)
- modal just blocks the cycle.
- custom field format (date/time)
- sleepTask should be abandoned also with escape or by returning quit
- sleepTask (with params) and returning void is interpreted as quit -> change it!
- textField?
    if so make it a submenu where text is a title and we navigate a pad/menu to choose letters and commands.


IDEA: generic input:

- input parsing should be delivered to focused menu object to allow customization
- then some chain or system wide functions can be called as aux. functions.
- input classes should provide a parser to be called as aux function of any of the above and deliver cmds.
  => that we can not accept Serial as input but use a specialized derivation instead

implemented:

navigation path

navRoot::pool
  navRoot::doInput
    navFocus->parseInput
      - navTarget::parseInput
        navTarget::doNav
          navNode::doNavigation(navCmd)
      - menuField::parseInput
        check numeric
        menuField::doNav
          navigate value (navCmd)
      - menuVariant::parseInput
        menuVariant::doNav
          navNode::doNavigation(navCmd)
          exit on enter key

navRoot::doNav

still need navigation and iteration protocol

iteration levels
  0 - member functions <-- this is the best option for web
  1 - event messages <- require navNode
  2 - nav commands <- apply to root!
  3 - input <- relly on nav path status


formating

  1 - use fmt template class wrapping menuOut
    + this is nice independente and interchangeable
    - cannot print specialized field/values templates
  2 - use derivation classes
    - cant use multiple outputs on same structure
  3 - use specialized function to print html
    + outputs call specialized thing
  4 - use generic format
    + fmt should be used by elements and not by the output
    - still field elements needs to print min/max for html
